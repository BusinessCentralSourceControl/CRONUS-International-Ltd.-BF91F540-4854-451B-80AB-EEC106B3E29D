dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.0.0.2078")
	{
		type(ForNav.Report_6_0_0_2078; ForNavReport6188772_v6_0_0_2078){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 6188772 "ForNAV US Check"
{
	Caption = 'Check';
	RDLCLayout = './Layouts/ForNAV US Check.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Args;"ForNAV Check Arguments")
		{
			UseTemporary = true;
			DataItemTableView = sorting("Primary Key");
			column(ReportForNavId_1000000002; 1000000002) {} // Autogenerated by ForNav - Do not delete
			dataitem(VoidGenJnlLine;"Gen. Journal Line")
			{
				DataItemTableView = sorting("Journal Template Name", "Journal Batch Name", "Posting Date", "Document No.");
				RequestFilterFields = "Journal Template Name", "Journal Batch Name", "Posting Date";
				column(ReportForNavId_9788; 9788) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				var
					TestVoidCheck: Codeunit "ForNAV Test Void Check";
				begin
					VoidGenJnlLine.SetRange("Bal. Account No.", Args."Bank Account No.");
					if not TestVoidCheck.TestVoidCheck(VoidGenJnlLine, Args, CurrReport.Preview) then
						CurrReport.Break;
				end;
				
				trigger OnAfterGetRecord();
				var
					CheckManagement: Codeunit CheckManagement;
				begin
					CheckManagement.VoidCheck(VoidGenJnlLine);
				end;
				
			}
			dataitem(GenJnlLnBuffer;"Gen. Journal Line")
			{
				UseTemporary = true;
				DataItemTableView = sorting("Journal Template Name", "Journal Batch Name", "Line No.");
				column(ReportForNavId_1000000001; 1000000001) {} // Autogenerated by ForNav - Do not delete
				dataitem(Model;"ForNAV Check Model")
				{
					UseTemporary = true;
					DataItemTableView = sorting("Page No.", "Part No.", "Line No.");
					column(ReportForNavId_1000000004; 1000000004) {} // Autogenerated by ForNav - Do not delete
					trigger OnPreDataItem();
					begin
					end;
					
				}
				trigger OnPreDataItem();
				begin
					CreateGenJnlLnBuffer;
				end;
				
				trigger OnAfterGetRecord();
				begin
					if not Args.CreateModelFromGenJnlLn(GenJnlLnBuffer, Model) then
						CurrReport.Skip;
					if Model.FindFirst() then
						if Model."Amount Paid" < 0 then
							Error(AmountCannotBeNegativeErr, GenJnlLnBuffer."Account Type", GenJnlLnBuffer."Account No.");
				end;
				
			}
			trigger OnPreDataItem();
			begin
			end;
			
		}
	}

	requestpage
	{

		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(BankAccount; Args."Bank Account No.")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Bank Account', Comment = 'DO NOT TRANSLATE';
						TableRelation = "Bank Account";

						trigger OnValidate()
						begin
							InputBankAccount;
						end;
					}
					field(LastCheckNo; Args."Check No.")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Last Check No.', Comment = 'DO NOT TRANSLATE';
					}
					field(OneCheckPerVendorPerDocumentNo; Args."One Check Per Vendor")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'One Check per Vendor per Document No.', Comment = 'DO NOT TRANSLATE';
						MultiLine = true;

						trigger OnValidate()
						begin
							Args.TestField("Test Print", false);
						end;
					}
					field(ReprintChecks; Args."Reprint Checks")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Reprint Checks', Comment = 'DO NOT TRANSLATE';
					}
					field(TestPrinting; Args."Test Print")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Test Print', Comment = 'DO NOT TRANSLATE';

						trigger OnValidate()
						begin
							Args."One Check Per Vendor" := false;
						end;
					}
					field(ForNavOpenDesigner; ReportForNavOpenDesigner)
					{
						ApplicationArea = All;
						Caption = 'Design', Comment = 'DO NOT TRANSLATE';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;
					}
				}
			}
		}

		actions
		{
		}

		trigger OnClosePage()
		begin
			Args.Modify;
		end;

		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
			if not Args.Get then
				Args.Insert;

			GetBankAccFromFirstGnlLine();
			InputBankAccount;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;
	end;

	trigger OnPostReport()
	begin


		;ReportForNav.Post;

	end;

	trigger OnPreReport()
	begin

		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		CheckSetupIsValid;
		LoadWatermark;
		Args.TestMandatoryFields;
		if CurrReport.Preview then
			Args."Test Print" := true;
		;ReportsForNavPre;

	end;
	var
		AmountCannotBeNegativeErr: Label 'The total amount for %1 %2 cannot be negative', Comment = 'DO NOT TRANSLATE';

	procedure SetArgs(Value: Record "ForNAV Check Arguments")
	begin
		Args := Value;
	end;

	procedure InputBankAccount()
	var
		BankAccount: Record "Bank Account";
	begin
		if Args."Bank Account No." <> '' then begin
			BankAccount.Get(Args."Bank Account No.");
			BankAccount.TestField(Blocked, false);
			BankAccount.TestField("Last Check No.");
			Args."Check No." := BankAccount."Last Check No.";
		end;
	end;

	local procedure GetBankAccFromFirstGnlLine()
	var
		GenJournalLine: Record "Gen. Journal Line";
	begin
		GenJournalLine.CopyFilters(VoidGenJnlLine);
		GenJournalLine.SetRange("Bal. Account Type", GenJournalLine."Bal. Account Type"::"Bank Account");
		if GenJournalLine.FindFirst() then
			Args."Bank Account No." := GenJournalLine."Bal. Account No.";
	end;

	local procedure CheckSetupIsValid()
	var
		CheckSetup: Record "ForNAV Check Setup";
	begin
		CheckSetup.Get;
		if CheckSetup.Layout = CheckSetup.Layout::" " then
			CheckSetup.FieldError(CheckSetup.Layout);

	end;

	local procedure LoadWatermark()
	var
		CheckSetup: Record "ForNAV Check Setup";
		OutStream: OutStream;
	begin
		CheckSetup.Get;
		CheckSetup.CalcFields(CheckSetup.Watermark);
		if not CheckSetup.Watermark.Hasvalue then
			exit;

		CheckSetup.Watermark.CreateOutstream(OutStream); ReportForNav.Watermark.Image.Load(OutStream);
	end;

	local procedure CreateGenJnlLnBuffer()
	var
		GenJnlLn: Record "Gen. Journal Line";
	begin
		if Args."Test Print" then begin
			GenJnlLnBuffer.Init;
			GenJnlLnBuffer.Insert;
		end else begin
			GenJnlLn.Copy(VoidGenJnlLine);
			if not Args."Test Print" then begin
				GenJnlLn.SetRange(GenJnlLn."Bank Payment Type", GenJnlLn."bank payment type"::"Computer Check");
				GenJnlLn.SetRange(GenJnlLn."Check Printed", false);
				GenJnlLn.SetRange("Bal. Account No.", Args."Bank Account No.");
			end;
			GenJnlLn.SetRange(GenJnlLn."Account Type", GenJnlLn."account type"::"Fixed Asset");
			if GenJnlLn.Find('-') then
				GenJnlLn.FieldError(GenJnlLn."Account Type");
			GenJnlLn.SetRange(GenJnlLn."Account Type");
			if GenJnlLn.FindSet then
				repeat
					GenJnlLnBuffer := GenJnlLn;
					GenJnlLnBuffer.Insert;
				until GenJnlLn.Next = 0;
		end;
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport6188772_v6_0_0_2078;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ApplicationSystemConstants: Codeunit "Application System Constants";
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2078\ForNav.Reports.6.0.0.2078.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2078.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.0.0.2078 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNav:= ReportForNav.Report_6_0_0_2078(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
