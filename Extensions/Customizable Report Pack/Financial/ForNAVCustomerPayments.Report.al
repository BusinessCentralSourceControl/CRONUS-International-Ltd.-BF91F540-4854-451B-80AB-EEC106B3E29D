dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.0.0.2078")
	{
		type(ForNav.Report_6_0_0_2078; ForNavReport6188681_v6_0_0_2078){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 6188681 "ForNAV Customer Payments"
{
	Caption = 'Customer Payments';
	UsageCategory = ReportsAndAnalysis;
	RDLCLayout = './Layouts/ForNAV Customer Payments.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(CustLedgerEntry;"Cust. Ledger Entry")
		{
			CalcFields = "Remaining Amt. (LCY)", "Amount (LCY)";
			DataItemTableView = sorting("Customer No.", "Document Type", "Posting Date") where("Document Type" = filter(Payment | "Credit Memo"));
			RequestFilterFields = "Posting Date", "Global Dimension 1 Code", "Global Dimension 2 Code", "Salesperson Code", "Customer No.";
			column(ReportForNavId_8503; 8503) {} // Autogenerated by ForNav - Do not delete
			dataitem(TempAppliedCustLedgEntry;"Cust. Ledger Entry")
			{
				CalcFields = "Original Amt. (LCY)", "Amount (LCY)";
				DataItemTableView = sorting("Entry No.");
				UseTemporary = true;
				column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
					SetFilter("Salesperson Code", SalespersonFilterString);
				end;
				
				trigger OnAfterGetRecord();
				begin
					CalcFields("Remaining Amt. (LCY)", "Amount (LCY)");
				end;
				
			}
			trigger OnPreDataItem();
			begin
				SetRange("Salesperson Code");
			end;
			
			trigger OnAfterGetRecord();
			begin
				CalcFields("Amount (LCY)");
				GetAppliedCustEntries(CustLedgerEntry, true);
			end;
			
		}
	}


	requestpage
	{

		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner; ReportForNavOpenDesigner)
					{
						ApplicationArea = All;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;
					}
				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		LoadWatermark;
	end;

	trigger OnPostReport()
	begin

		;ReportForNav.Post;

	end;

	trigger OnPreReport()
	begin
		SalespersonFilterString := CustLedgerEntry.GetFilter("Salesperson Code");
		;

		;ReportsForNavPre;

	end;
	var
		SalespersonFilterString: Text;

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		ForNAVSetup.Get;
		ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
		if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then
			exit;
		ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
		ForNavSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream); ReportForNav.Watermark.Image.Load(OutStream);

	end;

	procedure GetAppliedCustEntries(CustLedgEntry: Record "Cust. Ledger Entry"; UseLCY: Boolean)
	var
		DtldCustLedgEntry: Record "Detailed Cust. Ledg. Entry";
		PmtDtldCustLedgEntry: Record "Detailed Cust. Ledg. Entry";
		PmtCustLedgEntry: Record "Cust. Ledger Entry";
		ClosingCustLedgEntry: Record "Cust. Ledger Entry";
		AmountToApply: Decimal;
		AppliedDtldCustLedgEntry: Record "Detailed Cust. Ledg. Entry";
	begin
		TempAppliedCustLedgEntry.Reset;
		TempAppliedCustLedgEntry.DeleteAll;
		DtldCustLedgEntry.SetCurrentkey("Cust. Ledger Entry No.");
		DtldCustLedgEntry.SetRange("Cust. Ledger Entry No.", CustLedgEntry."Entry No.");
		DtldCustLedgEntry.SetRange(Unapplied, false);
		if DtldCustLedgEntry.Find('-') then
			repeat
				if DtldCustLedgEntry."Cust. Ledger Entry No." = DtldCustLedgEntry."Applied Cust. Ledger Entry No." then begin
					AppliedDtldCustLedgEntry.Init;
					AppliedDtldCustLedgEntry.SetCurrentkey("Applied Cust. Ledger Entry No.", "Entry Type");
					AppliedDtldCustLedgEntry.SetRange("Applied Cust. Ledger Entry No.", DtldCustLedgEntry."Applied Cust. Ledger Entry No.");
					AppliedDtldCustLedgEntry.SetRange("Entry Type", AppliedDtldCustLedgEntry."entry type"::Application);
					AppliedDtldCustLedgEntry.SetRange(Unapplied, false);
					if AppliedDtldCustLedgEntry.Find('-') then
						repeat
							if AppliedDtldCustLedgEntry."Cust. Ledger Entry No." <> AppliedDtldCustLedgEntry."Applied Cust. Ledger Entry No."
							then begin
								if ClosingCustLedgEntry.Get(AppliedDtldCustLedgEntry."Cust. Ledger Entry No.") then begin
									TempAppliedCustLedgEntry := ClosingCustLedgEntry;
									if UseLCY then
										TempAppliedCustLedgEntry."Amount to Apply" := -AppliedDtldCustLedgEntry."Amount (LCY)"
									else
										TempAppliedCustLedgEntry."Amount to Apply" := -AppliedDtldCustLedgEntry.Amount;
									if TempAppliedCustLedgEntry.Insert then;
								end;
							end;
						until AppliedDtldCustLedgEntry.Next = 0;
				end else begin
					if ClosingCustLedgEntry.Get(DtldCustLedgEntry."Applied Cust. Ledger Entry No.") then begin
						TempAppliedCustLedgEntry := ClosingCustLedgEntry;
						if UseLCY then
							TempAppliedCustLedgEntry."Amount to Apply" := DtldCustLedgEntry."Amount (LCY)"
						else
							TempAppliedCustLedgEntry."Amount to Apply" := DtldCustLedgEntry.Amount;
						if TempAppliedCustLedgEntry.Insert then;
					end;
				end;
			until DtldCustLedgEntry.Next = 0;
		if CustLedgEntry."Closed by Entry No." <> 0 then begin
			if ClosingCustLedgEntry.Get(CustLedgEntry."Closed by Entry No.") then begin
				TempAppliedCustLedgEntry := ClosingCustLedgEntry;
				if UseLCY then
					TempAppliedCustLedgEntry."Amount to Apply" := -CustLedgEntry."Closed by Amount (LCY)"
				else
					TempAppliedCustLedgEntry."Amount to Apply" := -CustLedgEntry."Closed by Amount";
				if TempAppliedCustLedgEntry.Insert then;
			end;
		end;
		ClosingCustLedgEntry.Reset;
		ClosingCustLedgEntry.SetCurrentkey("Closed by Entry No.");
		ClosingCustLedgEntry.SetRange("Closed by Entry No.", CustLedgEntry."Entry No.");
		if ClosingCustLedgEntry.Find('-') then
			repeat
				TempAppliedCustLedgEntry := ClosingCustLedgEntry;
				if UseLCY then
					TempAppliedCustLedgEntry."Amount to Apply" := ClosingCustLedgEntry."Closed by Amount (LCY)"
				else
					TempAppliedCustLedgEntry."Amount to Apply" := ClosingCustLedgEntry."Closed by Amount";
				if TempAppliedCustLedgEntry.Insert then;
			until ClosingCustLedgEntry.Next = 0;
		if TempAppliedCustLedgEntry.IsEmpty then begin
			TempAppliedCustLedgEntry.Init;
			TempAppliedCustLedgEntry."Entry No." := 0;
			TempAppliedCustLedgEntry."Salesperson Code" := CustLedgEntry."Salesperson Code";
			TempAppliedCustLedgEntry.Insert;
			//  ApplicationExist := FALSE;
		end;
		// ELSE
		//  ApplicationExist := TRUE;
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport6188681_v6_0_0_2078;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ApplicationSystemConstants: Codeunit "Application System Constants";
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2078\ForNav.Reports.6.0.0.2078.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2078.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.0.0.2078 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNav:= ReportForNav.Report_6_0_0_2078(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
