dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.0.0.2078")
	{
		type(ForNav.Report_6_0_0_2078; ForNavReport6188706_v6_0_0_2078){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 6188706 "ForNAV Purchase Statistics"
{
	Caption = 'Purchase Statistics';
	UsageCategory = ReportsAndAnalysis;
	RDLCLayout = './Layouts/ForNAV Purchase Statistics.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Args;"ForNAV Statistics Args.")
		{
			UseTemporary = true;
			PrintOnlyIfDetail = true;
			DataItemTableView = sorting("Currency Code");
			column(ReportForNavId_4146; 4146) {} // Autogenerated by ForNav - Do not delete
			dataitem(PurchInvoiceHeader;"Purch. Inv. Header")
			{
				CalcFields = Amount, "Amount Including VAT";
				DataItemLink = "Currency Code" = FIELD("Currency Code");
				DataItemTableView = sorting("Pay-to Vendor No.");
				RequestFilterFields = "Posting Date", "Pay-to Vendor No.", "Purchaser Code", "Payment Terms Code";
				column(ReportForNavId_5581; 5581) {} // Autogenerated by ForNav - Do not delete
				column(AmountLCY; Args.GetPurchInvAmountLCY(PurchInvoiceHeader))
				{
					IncludeCaption = false;
				}
				column(CostLCY; 0)
				{
					IncludeCaption = false;
				}
				trigger OnPreDataItem();
				begin
					if not Args.Invoices then
						CurrReport.Break;
				
					// if Args."Vendor No." then
					//	 SetCurrentkey("Pay-to Vendor No.");
				end;
				
			}
			dataitem(PurchCrMemoHeader;"Purch. Cr. Memo Hdr.")
			{
				CalcFields = Amount, "Amount Including VAT";
				DataItemLink = "Currency Code" = FIELD("Currency Code");
				DataItemTableView = sorting("Pay-to Vendor No.");
				column(ReportForNavId_8098; 8098) {} // Autogenerated by ForNav - Do not delete
				column(AmountLCY_CrMemo; Args.GetPurchCrMemoAmountLCY(PurchCrMemoHeader))
				{
					IncludeCaption = false;
				}
				column(CostLCY_CrMemo; 0)
				{
					IncludeCaption = false;
				}
				trigger OnPreDataItem();
				begin
					if Args."Credit Memos" then begin
						PurchInvoiceHeader.Copyfilter("Posting Date", "Posting Date");
						PurchInvoiceHeader.Copyfilter("Pay-to Vendor No.", "Pay-to Vendor No.");
						PurchInvoiceHeader.Copyfilter("Purchaser Code", "Purchaser Code");
						PurchInvoiceHeader.Copyfilter("Payment Terms Code", "Payment Terms Code");
						PurchInvoiceHeader.Copyfilter("Shortcut Dimension 1 Code", "Shortcut Dimension 1 Code");
						PurchInvoiceHeader.Copyfilter("Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
						PurchInvoiceHeader.Copyfilter("Sell-to Customer No.", "Sell-to Customer No.");
						PurchInvoiceHeader.Copyfilter("Location Code", "Location Code");
						PurchInvoiceHeader.Copyfilter("Tax Area Code", "Tax Area Code");
						PurchInvoiceHeader.Copyfilter("Responsibility Center", "Responsibility Center");
					end else
						CurrReport.Break;
				
					// if Args."Customer No." then
					//	 SetCurrentkey("Pay-to Vendor No.");
				end;
				
			}
			trigger OnPreDataItem();
			begin
			end;
			
		}
	}

	requestpage
	{

		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					group(Show)
					{
						Caption = 'Show';
						field(Invoices; Args.Invoices)
						{
							ApplicationArea = Basic, Suite;
							Caption = 'Invoices';
						}
						field(CreditMemos; Args."Credit Memos")
						{
							ApplicationArea = Basic, Suite;
							Caption = 'Credit Memos';
						}
					}
					group(GroupBy)
					{
						Caption = 'Group By';
						field(VendorNo; Args."Vendor No.")
						{
							ApplicationArea = All;
							Caption = 'Vendor No.';
						}
					}
					field(ForNavOpenDesigner; ReportForNavOpenDesigner)
					{
						ApplicationArea = All;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;
					}
				}
			}
		}

		actions
		{
		}

		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
			if not Args.Invoices and not Args."Credit Memos" then begin
				Args.Invoices := true;
				Args."Credit Memos" := true;
			end;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		LoadWatermark;
	end;

	trigger OnPostReport()
	begin















		;ReportForNav.Post;

	end;

	trigger OnPreReport()
	begin
		if not (Args.Invoices or Args."Credit Memos") then
			Args.TestField(Invoices);
		;

		Args.CreateCurrencies;
		;ReportsForNavPre;

	end;

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		ForNAVSetup.Get;
		ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
		if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then
			exit;
		ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
		ForNavSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream); ReportForNav.Watermark.Image.Load(OutStream);

	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport6188706_v6_0_0_2078;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ApplicationSystemConstants: Codeunit "Application System Constants";
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2078\ForNav.Reports.6.0.0.2078.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2078.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.0.0.2078 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNav:= ReportForNav.Report_6_0_0_2078(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
