dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.0.0.2078")
	{
		type(ForNav.Report_6_0_0_2078; ForNavReport6188692_v6_0_0_2078){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 6188692 "ForNAV Aged Accounts Payables"
{
	Caption = 'Aged Accounts Payables';
	UsageCategory = ReportsAndAnalysis;
	RDLCLayout = './Layouts/ForNAV Aged Accounts Payables.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Args;"ForNAV Aged Accounts Args.")
		{
			UseTemporary = true;
			DataItemTableView = sorting("Print Amounts in LCY");
			column(ReportForNavId_1000000001; 1000000001) {} // Autogenerated by ForNav - Do not delete
			dataitem(Account;Vendor)
			{
				RequestFilterFields = "No.";
				column(ReportForNavId_6836; 6836) {} // Autogenerated by ForNav - Do not delete
				dataitem(AgingBuffer;"ForNAV Aging Buffer")
				{
					UseTemporary = true;
					DataItemTableView = sorting("Currency Code");
					column(ReportForNavId_6188691; 6188691) {} // Autogenerated by ForNav - Do not delete
					trigger OnPreDataItem();
					begin
					end;
					
				}
				trigger OnPreDataItem();
				begin
				end;
				
				trigger OnAfterGetRecord();
				begin
					AgingCalculation.GetAgingWithCurrency(Account, AgingBuffer, CurrencyTotalsBuffer, Args, TempCurrency);
					if AgingBuffer.IsEmpty then
						CurrReport.Skip;
				end;
				
			}
			dataitem(CurrencyTotalsBuffer;"ForNAV Aging Buffer")
			{
				UseTemporary = true;
				DataItemTableView = sorting("Currency Code");
				column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
				end;
				
			}
			trigger OnPreDataItem();
			begin
				Args.CalcDates;
				Args.Insert;
			end;
			
		}
	}

	requestpage
	{

		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(AgedAsOf; Args."Ending Date")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Ending Date';
					}
					field(Agingby; Args."Aging By")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Aging by';
					}
					field(PeriodLength; Args."Period Length")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Period Length';
					}
					field(AmountsinLCY; Args."Print Amounts in LCY")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'All Amounts in LCY';
					}
					field(PrintDetails; Args."Print Details")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Print Details';
					}
					field(HeadingType; Args."Heading Type")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'Heading Type';
						Visible = false;
					}
					field(perCustomer; Args."New Page Per Customer")
					{
						ApplicationArea = Basic, Suite;
						Caption = 'New Page per Vendor';
					}
					field(ForNavOpenDesigner; ReportForNavOpenDesigner)
					{
						ApplicationArea = All;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
			InitRequestPage;
		end;
	}
	labels
	{
		AgedOverdueAmounts = 'Aged Overdue Amounts';
		AmnsInLCY = 'All Amounts in LCY.';
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		LoadWatermark;
	end;

	trigger OnPostReport()
	begin



		;ReportForNav.Post;

	end;

	trigger OnPreReport()
	var
	//CaptionManagement: Codeunit CaptionManagement;
	begin
		;

		;ReportsForNavPre;

	end;
	var
		TempCurrency: Record Currency temporary;
		AgingCalculation: Codeunit "ForNAV Aging Calculation";

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		ForNAVSetup.Get;
		ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
		if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then
			exit;
		ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
		ForNavSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream); ReportForNav.Watermark.Image.Load(OutStream);

	end;

	local procedure InitRequestPage()
	var
		Blank: DateFormula;
	begin
		if Args."Ending Date" = 0D then
			Args."Ending Date" := WorkDate;
		Args."Column Count" := 5;
		if Args."Period Length" = Blank then begin
			Evaluate(Args."Period Length", '<1M>');
			Args."Print Details" := true;
		end;

	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport6188692_v6_0_0_2078;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ApplicationSystemConstants: Codeunit "Application System Constants";
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2078\ForNav.Reports.6.0.0.2078.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2078.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.0.0.2078 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNav:= ReportForNav.Report_6_0_0_2078(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
